public {{this.name}} = {
    async sendTransactionAsync(
    {{> typed_params inputs=inputs}}
    {{#this.payable}}
        txData: TxDataPayable = {},
    {{/this.payable}}
    {{^this.payable}}
        txData: TxData = {},
    {{/this.payable}}
    ): Promise<string> {
        const txDataWithDefaults = await this.applyDefaultsToTxDataAsync(
            txData,
            this.{{this.name}}.estimateGasAsync.bind(
                this,
                {{> params inputs=inputs}}
            ),
        );
        const txHash = await promisify<string>(
            this.web3ContractInstance.{{this.name}}, this.web3ContractInstance,
        )(
            {{> params inputs=inputs}}
            txDataWithDefaults,
        );
        return txHash;
    },
    async estimateGasAsync(
    {{> typed_params inputs=inputs}}
        txData: TxData = {},
    ): Promise<number> {
        const txDataWithDefaults = await this.applyDefaultsToTxDataAsync(
            txData,
        );
        const gas = await promisify<number>(
            this.web3ContractInstance.{{this.name}}.estimateGas, this.web3ContractInstance,
        )(
            {{> params inputs=inputs}}
            txDataWithDefaults,
        );
        return gas;
    },
    getABIEncodedTransactionData(
    {{> typed_params inputs=inputs}}
    ): string {
        const abiEncodedTransactionData = this.web3ContractInstance.{{this.name}}.getData(
            {{> params inputs=inputs}}
        );
        return abiEncodedTransactionData;
    },
};
