// tslint:disable:no-consecutive-blank-lines ordered-imports align trailing-comma enum-naming
// tslint:disable:whitespace no-unbound-method no-trailing-whitespace
// tslint:disable:no-unused-variable
import {
    AwaitTransactionSuccessOpts,
    EncoderOverrides,
    ContractFunctionObj,
    ContractTxFunctionObj,
    SendTransactionOpts,
    BaseContract,
    PromiseWithTransactionHash,
    methodAbiToFunctionSignature,
    linkLibrariesInBytecode,
} from '@0x/base-contract';
import { schemas } from '@0x/json-schemas';
import {
    BlockParam,
    BlockParamLiteral,
    BlockRange,
    CallData,
    ContractAbi,
    ContractArtifact,
    DecodedLogArgs,
    MethodAbi,
    TransactionReceiptWithDecodedLogs,
    TxData,
    TxDataPayable,
    TxAccessListWithGas,
    SupportedProvider,
} from 'ethereum-types';
import { AbiEncoder, BigNumber, classUtils, EncodingRules, hexUtils, logUtils, providerUtils } from '@0x/utils';
import { EventCallback, IndexedFilterValues, SimpleContractArtifact } from '@0x/types';
import { Web3Wrapper } from '@0x/web3-wrapper';
import { assert } from '@0x/assert';
import * as ethers from 'ethers';
// tslint:enable:no-unused-variable

/* istanbul ignore next */
// tslint:disable:array-type
// tslint:disable:no-parameter-reassignment
// tslint:disable-next-line:class-name
export class {{contractName}}Contract extends BaseContract {
    /**
     * @ignore
     */
    {{#ifEquals this.deployedBytecode undefined~}}
    public static deployedBytecode: string | undefined;
    {{else~}}
    public static deployedBytecode = '{{this.deployedBytecode}}';
    {{/ifEquals~}}
    public static contractName = '{{contractName}}';
    private readonly _methodABIIndex: { [name: string]: number } = {};

    /**
     * @returns      The contract ABI
     */
    public static ABI(): ContractAbi {
        const abi = [
            {{#each ABI}}
            { {{#if (isDefined this.constant)}}
                constant: {{constant}},{{/if}}{{#if (isDefined this.anonymous)}}
                anonymous: {{anonymous}},{{/if}}
                inputs: [
                    {{#each inputs}}
                    {{> abi_type this}}
                    {{/each}}
                ],{{#this.name}}
                name: '{{{this}}}',{{/this.name}}
                outputs: [
                    {{#each outputs}}
                    {{> abi_type this}}
                    {{/each}}
                ],{{#if (isDefined this.payable)}}
                payable: {{payable}},{{/if}}{{#this.stateMutability}}
                stateMutability: '{{this}}',{{/this.stateMutability}}
                type: '{{type}}',
            },
            {{/each}}
        ] as ContractAbi;
        return abi;
    }

    public getFunctionSignature(methodName: string): string {
        const index = this._methodABIIndex[methodName];
        const methodAbi = {{contractName}}Contract.ABI()[index] as MethodAbi; // tslint:disable-line:no-unnecessary-type-assertion
        const functionSignature = methodAbiToFunctionSignature(methodAbi);
        return functionSignature;
    }

    public getABIDecodedTransactionData<T>(methodName: string, callData: string): T {
        const functionSignature = this.getFunctionSignature(methodName);
        const self = (this as any) as {{contractName}}Contract;
        const abiEncoder = self._lookupAbiEncoder(functionSignature);
        const abiDecodedCallData = abiEncoder.strictDecode<T>(callData);
        return abiDecodedCallData;
    }

    public getABIDecodedReturnData<T>(methodName: string, callData: string): T {
        if (this._encoderOverrides.decodeOutput) {
            return this._encoderOverrides.decodeOutput(methodName, callData);
        }
        const functionSignature = this.getFunctionSignature(methodName);
        const self = (this as any) as {{contractName}}Contract;
        const abiEncoder = self._lookupAbiEncoder(functionSignature);
        const abiDecodedCallData = abiEncoder.strictDecodeReturnValue<T>(callData);
        return abiDecodedCallData;
    }

    public getSelector(methodName: string): string {
        const functionSignature = this.getFunctionSignature(methodName);
        const self = (this as any) as {{contractName}}Contract;
        const abiEncoder = self._lookupAbiEncoder(functionSignature);
        return abiEncoder.getSelector();
    }

    {{#each methods}}
    {{#if this.devdoc.details}}
    /**
     * {{formatDocstringForMethodTs this.devdoc.details}}
    {{> params_docstring inputs=inputs docstrings=devdoc.params}}
    {{#if devdoc.return}}
    * @returns {{devdoc.return}}
    {{/if}}
     */
    {{/if}}
    public {{languageSpecificName}}(
        {{> typed_params inputs=this.inputs}}
    ): Contract{{^this.constant}}Tx{{/this.constant}}FunctionObj<{{> return_type outputs=outputs ~}}> {
        const self = this as any as {{../contractName}}Contract;
        {{#each inputs}}
            {{#assertionType name type}}{{/assertionType}}
        {{/each}}
        const functionSignature = '{{this.functionSignature}}';

        return {
            selector: self._lookupAbiEncoder(functionSignature).getSelector(),
            {{^this.constant}}
            {{> method_tx}}
            {{/this.constant}}
            {{> method_call stateMutability=this.stateMutability}}
        }
    };
    {{/each}}

    constructor(
        address: string,
        supportedProvider: SupportedProvider,
        txDefaults?: Partial<TxData>,
        logDecodeDependencies?: { [contractName: string]: ContractAbi },
        deployedBytecode: string | undefined = {{contractName}}Contract.deployedBytecode,
        encoderOverrides?: Partial<EncoderOverrides>,
    ) {
        super('{{contractName}}', {{contractName}}Contract.ABI(), address, supportedProvider, txDefaults, logDecodeDependencies, deployedBytecode, encoderOverrides);
        classUtils.bindAll(this, ['_abiEncoderByFunctionSignature', 'address', '_web3Wrapper']);

        {{contractName}}Contract.ABI().forEach((item, index) => {
            if (item.type === 'function') {
                const methodAbi = item as MethodAbi;
                this._methodABIIndex[methodAbi.name] = index;
            }
        });
    }
}

// tslint:disable:max-file-line-count
// tslint:enable:no-unbound-method no-parameter-reassignment no-consecutive-blank-lines ordered-imports align
// tslint:enable:trailing-comma whitespace no-trailing-whitespace
